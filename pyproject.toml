[build-system]
requires = ["uv-build >= 0.7.19, <0.9.0", "setuptools>=61"]
build-backend = "uv_build"


[project]
name = "MeteoFungi"
version = "0.1.0"
description = "Predict Mushroom Appearance from Meteo Data"
requires-python = ">=3.13"
dependencies = [
    "plotly>=6.3.0",
    "polars>=1.32.3",
    "setuptools>=80.9.0",
    "streamlit>=1.48.1",
    "uv-build>=0.8.14",
]

[dependency-groups]

dev = [
    "mypy>=1.17.1",
    "pandas-stubs>=2.3.2.250827",
    "plotly-stubs>=0.0.6",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-emoji>=0.2.0",
    "pytest-md>=0.2.0",
    "ruff>=0.12.10",
    "types-markdown>=3.8.0.20250809",
    "types-python-dateutil>=2.9.0.20250822",
    "types-toml>=0.10.8.20240310",
    "uv>=0.8.13",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 88
indent-width = 4

target-version = "py313"


[tool.ruff.lint]
# The following ruleset has been inspired by https://github.com/cancervariants/gene-normalization/blob/main/pyproject.toml
select = [
    "F", # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "E", "W", # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "I", # https://docs.astral.sh/ruff/rules/#isort-i
    "N", # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "S", # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "B", # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "SIM", # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "PTH", # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "PERF", # https://docs.astral.sh/ruff/rules/#perflint-perf
    "RUF", # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "DTZ", # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
]
fixable = [
    "I",
    "F401",
    "B",
    "SIM",
    "PERF",
    "RUF"
]

ignore = [
    "E111", "E114", "E117", "E501",
    "W191",
    "S321",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D100",
    "D102",
    "S101",
    "B011",
]
"*__init__.py" = ["F401"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]
packages = ['meteofungi']
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
markers = [
    "unit: unit tests",
    "integration: integration tests",
    "regression: regression tests",
    "performance: performance tests",
    "skip: slow tests or depending on local data"
]

[tool.coverage.run]
branch = true
data_file = 'tests/cover/.coverage'

[tool.coverage.paths]
source = [
    "src/meteofungi",
    "*/site-packages/meteofungi"
]

[tool.coverage.report]

# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_empty = true
skip_covered = true
fail_under = 10
#ignore_errors = true

[tool.coverage.html]
directory = "tests/coverage_html_report"
