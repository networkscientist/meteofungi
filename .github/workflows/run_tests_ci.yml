name: Pytest CI
on:
  push:
    branches:
      [ master ]
    paths-ignore:
      - '.gitattributes'
      - '.github/workflows/**'
      - '.pre-commit-config.yaml'
      - 'assets/**'
      - 'data/**'
      - 'docs/**'
      - 'requirements.txt'
      - 'requirements_dev.txt'
      - '**.adoc'
      - '**.md'
      - '**.svg'
  pull_request:
    branches:
      [ master ]
    paths-ignore:
      - '.gitattributes'
      - '.github/workflows/**'
      - '.pre-commit-config.yaml'
      - 'assets/**'
      - 'data/**'
      - 'docs/**'
      - 'requirements.txt'
      - 'requirements_dev.txt'
      - '**.adoc'
      - '**.md'
      - '**.svg'
  workflow_dispatch:

# Minimum permissions required by skip-duplicate-actions
permissions:
  actions: write
  contents: read

jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'never'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md", "**/docs/**", "data/**", "assets/**"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
  build:
    name: Run Python Tests
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: "Set Timezone"
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Europe/Berlin"

      - name: "Checkout Repo"
        uses: actions/checkout@v5.0.0
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      #      - name: "Set up Python"
      #        uses: actions/setup-python@v6.0.0
      #        with:
      #          python-version-file: "pyproject.toml"

      - name: "Install uv"
        uses: astral-sh/setup-uv@v6.8.0
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: "Install Project"
        run: uv sync --all-groups

      - name: Run tests
        # For example, using `pytest`
        run: uv run pytest